using Il2Cpp_Modding_Codegen.Config;
using Il2Cpp_Modding_Codegen.Data;
using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.IO;
using System.Text;
using System.Linq;

namespace Il2Cpp_Modding_Codegen.Serialization
{
    public class CppHeaderCreator
    {
        private SerializationConfig _config;
        private CppContextSerializer _serializer;
        private CppTypeDataSerializer _typeSerializer;

        public CppHeaderCreator(SerializationConfig config, CppContextSerializer serializer, CppTypeDataSerializer typeSerializer)
        {
            _config = config;
            _serializer = serializer;
            _typeSerializer = typeSerializer;
        }

        public void Serialize(CppSerializerContext context)
        {
            var data = context.LocalType;
            var headerLocation = Path.Combine(_config.OutputDirectory, _config.OutputHeaderDirectory, context.FileName) + ".hpp";
            Directory.CreateDirectory(Path.GetDirectoryName(headerLocation));
            using (var ms = new MemoryStream())
            {
                var rawWriter = new StreamWriter(ms);
                var writer = new CppStreamWriter(rawWriter, "  ");
                // Write header
                writer.WriteComment($"Autogenerated from {nameof(CppHeaderCreator)} on {DateTime.Now}");
                writer.WriteComment("Created by Sc2ad");
                writer.WriteComment("=========================================================================");
                writer.WriteLine("#pragma once");
                // TODO: determine when/if we need this
                writer.WriteLine("#pragma pack(push, 8)");
                // Write SerializerContext
                _serializer.Serialize(writer, context);
                // Write namespace
                writer.WriteComment("Type namespace: " + data.This.Namespace);
                writer.WriteDefinition("namespace " + context.TypeNamespace);
                // Write actual type
                try
                {
                    _typeSerializer.Serialize(writer, data);
                }
                catch (UnresolvedTypeException e)
                {
                    if (_config.UnresolvedTypeExceptionHandling.TypeHandling == UnresolvedTypeExceptionHandling.DisplayInFile)
                    {
                        writer.WriteComment("Unresolved type exception!");
                        writer.WriteLine("/*");
                        writer.WriteLine(e);
                        writer.WriteLine("*/");
                    }
                    else if (_config.UnresolvedTypeExceptionHandling.TypeHandling == UnresolvedTypeExceptionHandling.SkipIssue)
                        return;
                    else if (_config.UnresolvedTypeExceptionHandling.TypeHandling == UnresolvedTypeExceptionHandling.Elevate)
                        throw new InvalidOperationException($"Cannot elevate {e} to a parent type- there is no parent type!");
                }
                // End the namespace
                writer.CloseDefinition();

                if (data.This.Namespace == "System" && data.This.Name == "ValueType")
                {
                    writer.WriteLine("template<class T>");
                    writer.WriteLine("struct is_value_type<T, typename std::enable_if_t<std::is_base_of_v<System::ValueType, T>>> : std::true_type{};");
                }

                // DEFINE_IL2CPP_ARG_TYPE
                string arg0 = context.QualifiedTypeName;
                string arg1 = "";
                if (data.Info.TypeFlags == TypeFlags.ReferenceType)
                    arg1 = "*";
                // For Name and Namespace here, we DO want all the `, /, etc
                if (!data.This.IsGeneric)
                    writer.WriteLine($"DEFINE_IL2CPP_ARG_TYPE({arg0 + arg1}, \"{data.This.Namespace}\", \"{data.This.Name}\");");
                else
                    writer.WriteLine($"DEFINE_IL2CPP_ARG_TYPE_GENERIC({arg0}, {arg1}, \"{data.This.Namespace}\", \"{data.This.Name}\");");

                writer.WriteLine("#pragma pack(pop)");
                writer.Flush();
                if (File.Exists(headerLocation))
                    throw new InvalidOperationException($"Was about to overwrite existing file: {headerLocation} with context: {context.LocalType.This}");
                using (var fs = File.OpenWrite(headerLocation))
                {
                    rawWriter.BaseStream.Position = 0;
                    rawWriter.BaseStream.CopyTo(fs);
                }
            }
        }
    }
}