using Il2CppModdingCodegen.Config;
using System;
using System.IO;

namespace Il2CppModdingCodegen.Serialization
{
    public class CppSourceCreator
    {
        private readonly SerializationConfig _config;
        private readonly CppContextSerializer _serializer;

        internal CppSourceCreator(SerializationConfig config, CppContextSerializer serializer)
        {
            _config = config;
            _serializer = serializer;
        }

        internal void Serialize(CppTypeContext context)
        {
            var sourceLocation = Path.Combine(_config.OutputDirectory, _config.OutputSourceDirectory, context.CppFileName);
            Directory.CreateDirectory(Path.GetDirectoryName(sourceLocation));
            using var ms = new MemoryStream();
            using var rawWriter = new StreamWriter(ms);
            using var writer = new CppStreamWriter(rawWriter, "  ");
            // Write header
            writer.WriteComment($"Autogenerated from {nameof(CppSourceCreator)}");
            writer.WriteComment($"Created by Sc2ad");
            writer.WriteComment("=========================================================================");
            try
            {
                // Write SerializerContext and actual type
                _serializer.Serialize(writer, context, false);
            }
            catch (UnresolvedTypeException e)
            {
                if (_config.UnresolvedTypeExceptionHandling?.TypeHandling == UnresolvedTypeExceptionHandling.DisplayInFile)
                {
                    writer.WriteLine("// Unresolved type exception!");
                    writer.WriteLine("/*");
                    writer.WriteLine(e);
                    writer.WriteLine("*/");
                }
                else if (_config.UnresolvedTypeExceptionHandling?.TypeHandling == UnresolvedTypeExceptionHandling.SkipIssue)
                    return;
                else if (_config.UnresolvedTypeExceptionHandling?.TypeHandling == UnresolvedTypeExceptionHandling.Elevate)
                    throw new InvalidOperationException($"Cannot elevate {e} to a parent type- there is no parent type!");
            }
            writer.Flush();
            rawWriter.Flush();

            writer.WriteIfDifferent(sourceLocation, context);
        }
    }
}
